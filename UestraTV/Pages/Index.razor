@page "/"

@using UestraTV.Data
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject BroadcastService BroadcastService
@inject IJSRuntime jsRuntime
@inject ILogger<Index> logger

@if (broadcasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <CascadingValue Value="this">
        <div class="docs-example">
            <BSCarousel NumberOfItems="@numberOfItems">
                <BSCarouselIndicators NumberOfItems="@numberOfItems" />
                <div class="carousel-inner">
                    @for (int i = 0; i < numberOfItems; i++)
                    {
                        <BSCarouselItem src="@broadcasts[i].Url.ToString()" alt="@broadcasts[i].Id" Interval="10000" />
                    }
                </div>
                <BSCarouselControl CarouselDirection="CarouselDirection.Previous" NumberOfItems="@numberOfItems" />
                <BSCarouselControl CarouselDirection="CarouselDirection.Next" NumberOfItems="@numberOfItems" />
            </BSCarousel>
        </div>
    </CascadingValue>
}

@code {
    private List<Broadcast> broadcasts;
    private int numberOfItems = 0;
    private HubConnection _hubConnection;

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        Action<Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions> configureHttpConnection = (_) => { };
        var uri = NavigationManager.ToAbsoluteUri("/update");
        if (Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true")
        {
            // Workaround for docker
            uri = new Uri("https://localhost:443/update");
            configureHttpConnection = (opts) =>
            {
                opts.HttpMessageHandlerFactory = (message) =>
                {
                    if (message is HttpClientHandler clientHandler)
                    // bypass SSL certificate
                    clientHandler.ServerCertificateCustomValidationCallback +=
                                        (sender, certificate, chain, sslPolicyErrors) => { return true; };
                    return message;
                };
            };
        }
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(uri, configureHttpConnection)
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<DateTime, bool, List<Broadcast>, string>(nameof(IUpdate.Update), async (dateTime, available, payload, message) =>
        {
        //await jsRuntime.InvokeAsync<string>("console.log", dateTime, message);
        string newUpdate = available ? "New Update" : "No Update";
            logger.LogDebug($"{dateTime} - {message} - {newUpdate}");
            if (available)
            {
                broadcasts.Clear();
                numberOfItems = -1; // hacky workaround to clear the carousel items
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);

                broadcasts = payload;
                numberOfItems = broadcasts.Count;
                
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            }
        });

        await _hubConnection.StartAsync();

        broadcasts = await BroadcastService.GetBroadcastAsync(ProgramWeekday.Today);
        numberOfItems = broadcasts.Count;
    }

    protected override async Task OnAfterRenderAsync(bool firstrun)
    {
        logger.LogDebug($"After Render Index - first run: {firstrun}");
        await base.OnAfterRenderAsync(firstrun);
    }

    protected override Task OnParametersSetAsync()
    {
        logger.LogDebug($"OnParametersSetAsync");
        return base.OnParametersSetAsync();
    }
}
